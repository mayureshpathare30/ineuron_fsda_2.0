                                                                           Python Assignment-7


1. What is the name of the feature responsible for generating Regex objects?

The re.compile() function returns Regex object.

----------------------------------------------------------------------------------------2--------------------------------------------------------------------------------------------------------
2. Why do raw strings often appear in Regex objects?

Raw strings are used in regular expressions to avoid the need to escape backslashes, as backslashes are used in regular expressions to denote special forms or characters. 
By using raw strings, you can regular expressions more easily and with less clutter, as you do not have to include an extra backslash before every backslash in the regular expression. 
This makes regular expressions more readable and less prone to errors.

------------------------------------------------------------------------------------3-----------------------------------------------------------------------------------------------------------

3. What is the return value of the search() method?

The search() method, when called on a Regex object, returns a Match object if a match is found, or None if no match is found.
The Match object contains information about the match, such as the starting and ending indices of the match in the string being searched, 
as well as any groups that were captured during the match. If no match is found, the search() method returns None.

---------------------------------------------------------------------------------------4-------------------------------------------------------------------------------------------------------------

4. From a Match item, how do you get the actual strings that match the pattern?

 The group() method of the Match object to get the actual strings that match the pattern. For example, if m is a Match object, you can get the matched string using m.group().
If the Match object contains groups (i.e., parts of the pattern enclosed in parentheses), you can access the strings that match each group using the groups()
method or the group() method with a group number as an argument. For example, m.groups() returns a tuple containing the strings that match each group, 
and m.group(1) returns the string that matches the first group.

----------------------------------------------------------------------------------------5--------------------------------------------------------------------------------------------------------

5. In the regex which created from the r'(\d\d\d)-(\d\d\d-\d\d\d\d), what does group zero cover?
Group 2? Group 1?

Group zero (often not explicitly shown in regex outputs, but always there) always refers to entire match. 
So in this case, it would cover the entire matched pattern, which is a 3-digit number, a literal hyphen, and a 4-digit number.

Group 1 refers to the first captured group in the regex, which is the first set of parentheses in the pattern. Here, it would cover the 3-digit number.

Group 2 refers to the second captured group, which is the second set of parentheses. Here, it would cover the 4-digit number.

------------------------------------------------------------------------------------------6------------------------------------------------------------------------------------------------

6. In standard expression syntax, parentheses and intervals have distinct meanings. How can you tell
a regex that you want it to fit real parentheses and periods?

In regular expression syntax, you can use backslashes () to escape special characters, including parentheses and periods to indicate that they should be treated literally. 
To match a literal parenthesis, you can use(or). To match a literal period, you can use .`. This tells the regex engine to treat these characters as part of the pattern, 
rather than as special characters with their own meanings.

For example, the regex \(abc\.\d{3}\) would match the string (abc.123), but not the string (abc123). The parentheses and period are treated as literal characters, 
while the \d{3} matches any three digits.

It's worth noting that in some regex flavors, you may need to use additional backslashes to escape special characters, depending on how the regex is being used. 
For example, in Python, you would need to use \\( and \\) to match literal parentheses in a regex pattern. This is because Python uses backslashes to define special sequences in strings,
so you need to escape the backslashes themselves to pass them through to the regex engine.

---------------------------------------------------------------------------------------------7------------------------------------------------------------------------------------------------

7. The findall() method returns a string list or a list of string tuples. What causes it to return one of
the two options?

The findall() method in Python's re module returns a list of strings not a list of string tuples. It returns all non-overlapping matches of a pattern in a string,
as a list of strings. Here's an example:

import re

text = "Hello, this is a test string. Hello again, this is another test string."
matches = re.findall(r'test', text)
print(matches)  # Output: ['test', 'test', 'test']

In the example above, findall() returns a list of strings that match the pattern 'test' in the text string.

However, if you use capturing groups in your regular expression pattern, findall() will return a list of tuples, where each tuple contains the text matched by each capturing group. 
Here's an example:

-------------------------------------------------------------------------------------------------8------------------------------------------------------------------------------------------------

8. In standard expressions, what does the | character mean?

In standard regular expression syntax, the "|" character is used for alternation, which means it will match either the expression before it or the expression after it. 
For example, in the regex "cat|dog", it will match either the string "cat" or the string "dog".

----------------------------------------------------------------------------------------9-------------------------------------------------------------------------------------------------------

9. In regular expressions, what does the character stand for?

In regular expressions, the "|" character is used for alternation and stands for "OR". 
It allows you to match either the pattern to the left or the pattern to the right of the "|" symbol. 
For example, the regex "cat|dog" will match either the string "cat" or the string "dog".

-------------------------------------------------------------------------------------------10-----------------------------------------------------------------------------------------------------

10.In regular expressions, what is the difference between the + and * characters?

In regular expressions, the ' and '*' are quantifiers that match one or more occurrences and zero or more occurrences of the preceding character or group, respectively.

The '+' character matches one or more occurren of the preceding or group. For example, the regular expression 
'a+' matches one or more 'a' characters in a row, such as 'a', 'aa', 'aaa', and so on.

The '*' character matches zero or more occurrences of the preceding character or group. For example, the regular expression 'a*' matches zero or more 'a' 
characters in a row, such as an empty string, 'a', 'aa', 'aaa', and so on.

Here's an example to illustrate the difference between '+' and '*':

Suppose we have the following string:

crowd = 'P1P2P3P4P5P6CCCP7P8P9'

If we want to find all the occurrences of one or more consecutive 'P' characters, we can use the regular expression '/P+/'. This will match the following substrings:

['P1', 'P2', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9']

On the other hand, if we want to find all the occurrences of zero or more consecutive 'P' characters, we can use the regular expression '/P*/'.
This will match the following substrings:

['', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', '', '']

As you can see, the '+' character matches one or more occurrences, while the '*' character matches zero or more occurrences.

I hope this helps clarify the difference between '+' and '*' in regular expressions!

--------------------------------------------------------------------------------------------11------------------------------------------------------------------------------------------------
11. What is the difference between {4} and {4,5} in regular expression?

In regular expressions, {4} specifies that exactly 4 occurrences of the preceding character or group must be present for a match to occur. 
On the other hand, {4,5} is a range quantifier that specifies that at least 4 but no more than 5 occurrences of the preceding character or group must be present for a match to occur.

For example, the regex \d{4} will match exactly four digits, such as "1234" or "5678", but not "123" or "12345".
In contrast, the regex \d{4,5} will match at least four but no more than five digits, such as "1234", "12345", "5678", or "56789", but not "123" or "123456".

In summary, {4} matches exactly four occurrences, while {4,5} matches at least four but no more than five occurrences of the preceding character or group in regular expressions.

----------------------------------------------------------------------------------------------12----------------------------------------------------------------------------------------------

12. What do you mean by the \d, \w, and \s shorthand character classes signify in regular
expressions?

In regular expressions, the \d, \w, and \s shorthand character classes are often used as a convenient way to match certain types of characters. Here's what each of them means:

\d: This matches any digit character, which includes the numbers 0-9. For example, the regular expression \d would match the string "5" or "7", but not the string "a" or "b".
\w: This matches any alphanumeric character, which includes the letters A-Z (both uppercase and lowercase), the digits 0-9, and the underscore character (_). 
For example, the regular expression \w would match the string "hello" or "123", but not the string "!@#".
\s: This matches any whitespace character, which includes the space character, the tab character, and the newline character. 
For example, the regular expression \s would match the string " " (a single space), or the string "\t" (a tab), but not the string "a".
I hope that helps! Let me know if you have any other questions.

--------------------------------------------------------------------------------------------13--------------------------------------------------------------------------------------------

13. What do means by \D, \W, and \S shorthand character classes signify in regular expressions?

In regular expressions, \D, \W, and \S are shorthand character classes that match certain types of characters. Here's what each of them signifies:

\D: This shorthand character class any character that is not a digit. In other words, it matches any character that is not the range of 0-9. 
This includes letters, punctuation marks, whitespace characters, and other special characters.
For example, the regular expression \D* would match any string that contains only non-digit characters, such as "abc", "!@#", or "hello".

\W: This shorthand character class matches any character that is not a word character. In regular expressions, 
a "word character" is defined as any character that is a letter, digit, or underscore. Therefore, \W matches any character that is not a letter, digit, or underscore.
For example, the regular expression \W+ would match any string that contains one or more non-word characters, such as "!@#", "$%^", or "hello_world".

\S: This shorthand character class matches any character that is not a whitespace character. In regular expressions,
a "whitespace character" is any character that is considered whitespace in Unicode, such as space, tab, line feed, and carriage return.
For example, the regular expression \S* would match any string that contains only non-whitespace characters, such as "abc", "!@#", or "helloWorld".

It's worth noting that these shorthand character classes are case-sensitive, so they will only match uppercase or lowercase letters, 
depending on the case of the characters in the regular expression. Additionally, these shorthand character classes can be used in combination with other regular expression elements,
such as quantifiers and anchors, to create more complex regular expressions.

----------------------------------------------------------------------------------------14------------------------------------------------------------------------------------------------------
14. What is the difference between .*? and .*?

In regular expressions, .*? and .* are both used to match any character(s), but they differ in their behavior when it comes to "greediness."

.* is "greedy," meaning it will try to match as many characters as possible while still allowing the overall regex to return a match. 
On the other hand, .*? is "lazy" or "non-greedy," meaning it will try to match as few characters as possible while still allowing the overall regex to return a match.

Here's an example to illustrate the difference:

Suppose you have the following string:

<p>This is a paragraph with a <a href="https://example.com">link</a> in it.</p>

If you want to match everything between the first <p> and the last </p>, you could use the regex <p>.*</p>. 
However, this regex would be greedy and match everything from the first <p> to the last </p>, including the link and all the text in between.
To make the regex non-greedy, you can use <p>.*?</p>. This regex will match only the text between the first <p> and the first </p> that it encounters, resulting in a smaller match.
In summary, .*? is a more cautious version of .* that matches as few characters as possible, while .* matches as many characters as possible.

--------------------------------------------------------------------------------------------15--------------------------------------------------------------------------------------------------


15. What is the syntax for matching both numbers and lowercase letters with a character class?

To match both numbers and lowercase letters with a character class in expressions, you can use the following syntax:

[0-9a-z]

This character class will match any digit from 0 to 9 or any lowercase letter from a to z. If you want to include uppercase letters as well, you can use:

[0-9a-zA-Z]

Or, if you want to match any letter (either uppercase or lowercase) and any digit, you can use:

[\da-zA-Z]

The \d shortcut matches any digit, and the a-z and A-Z ranges match any lowercase or uppercase letter, respectively.

-------------------------------------------------------------------------------------16--------------------------------------------------------------------------------------------------------



16. What is the procedure for making a normal expression in regax case insensitive?

To make a regular expression-insensitive in .NET, you can the RegexOptions.IgnoreCase option or the (?i) inline option. Using RegexOptions.
IgnoreCase option: You can specify the RegexOptionsIgnoreCase option as a parameter when calling a regex method such as Regex.
IsMatch, Regex.Match, RegexReplace, or Regex.Split. This tells the regex engine to ignore the case of the input string when matching the pattern. Here's an example:

string pattern = "hello";
string input = "Hello";
RegexOptions options = RegexOptions.IgnoreCase;

Match match = Regex.Match(input, pattern, options);
if (match.Success)
{
    Console.WriteLine("Match found: {0}", match.Value);
}
else
{
    Console.WriteLine("Match not found.");
}

Using (?i) inline option: You can also make a regular expression case-insensitive by including the (?i) inline option at the beginning of the pattern. 
This tells the regex engine to ignore the case of the input string for the entire pattern. Here's an example:

string pattern = "(?i)hello";
string input = "Hello";

Match match = Regex.Match(input, pattern);
if (match.Success)
{
    Console.WriteLine("Match found: {0}", match.Value);
}
else
{
    Console.WriteLine("Match not found.");
}

Both of these methods will produce the same output: Match found: Hello

-------------------------------------------------------------------------------------------17------------------------------------------------------------------------------------------------

17. What does the . character normally match? What does it match if re.DOTALL is passed as 2nd
argument in re.compile()?

The . character normally matches any character except a newline. If re.DOTALL is passed as the second argument in re.compile(), 
the . character will match any character, including a newline

------------------------------------------------------------------------------------------18-----------------------------------------------------------------------------------------------

18.If numReg = re.compile(r'\d+'), what will numRegex.sub('X', '11 drummers, 10 pipers, five rings, 4 hen') return?

'X drummers, X pipers, five rings, X hens'

The regex compiled in numReg will match one or more digits (\d+), and the sub() method will replace those matched digits with 'X'. 
Since re.DOTALL is not passed as the second argument in re.compile(), the dot character in the regex will not match newline characters.
Therefore, the substitution will only occur within the same line and not across lines.

----------------------------------------------------------------------------------------19-----------------------------------------------------------------------------------------------------

19. What does passing re.VERBOSE as the 2nd argument to re.compile() allow to do?

Passing re.VERBOSE as the second argument to re.compile() allows you to write regular expressions
that are more readable by allowing you to visually separate logical sections the pattern and add comments. 
Whitespace within the is ignored, except in a character class, or when preceded by an unescaped backslash, or within tokens like 
*?, (?: or (?P<...>. When a line contains a # that is not in a character class and is not preceded by an unescaped backslash, 
all characters from the leftmost such # through the end of the line are ignored. 
This means that the two following regular expression objects that match a decimal number are functionally equal:

a = re.compile(r"""\d +  # the integral part
                   \.    # the decimal point
                   \d *  # some fractional digits""", re.VERBOSE)
b = re.compile(r"\d+\.\d*")

Corresponds to the inline flag (?x).


20.How would you write a regex that match a number with comma for every three digits? It must match the given following: '42' '1,234' '6,368,745'
but not the following: '12,34,567' (which has only two digits between the commas) '1234' (which lacks commas)

Sources: chegg.com (1) chegg.com (2) python-forum.io (3) cliffsnotes.com (4)

To match a number with commas for every three digits, you can use the following regular expression:

\d{1,3}(?:,\d{3})*

This regular expression uses the \d{1,3} pattern to match one to three digits at the beginning of the number. 
The (?:,\d{3})* pattern then matches zero or more groups of a comma followed by three digits.

Here is an example of how you can use this regular expression in Python:

import re

num_regex = re.compile(r"\d{1,3}(?:,\d{3})*")

numbers = ["42", "1,234", "6,368,745", "12,34,567", "1234"]

for number in numbers:
    if num_regex.fullmatch(number):
        print(f"{number} matches the regex")
    else:
        print(f"{number} does not match the regex")

This will output:

42 matches the regex
1,234 matches the regex
6,368,745 matches the regex
12,34,567 does not match the regex
1234 does not match the regex

This regular expression will match numbers with or without commas, as long as the commas are in the correct positions (i.e., every three digits).
If you want to only match numbers with commas, you can modify the regular expression as follows:

(?<!\d),\d{3}(?!\d)(?:,\d{3})*

This regular expression uses negative lookbehind and lookahead assertions to ensure that the number does not start or end with a comma.

Here is an example of how you can use this regular expression in Python:

import re

num_regex = re.compile(r"(?<!\d),\d{3}(?!\d)(?:,\d{3})*")

numbers = ["42", "1,234", "6,368,745", "12,34,567", "1234"]

for number in numbers:
    if num_regex.fullmatch(number):
        print(f"{number} matches the regex")
    else:
        print(f"{number} does not match the regex")

This will output:

1,234 matches the regex
6,368,745 matches the regex
12,34,567 does not match the regex
1234 does not match the regex

---------------------------------------------------------------------------------------21---------------------------------------------------------------------------------------------------

21. How would you write a regex that matches the full name of someone whose last name is Watanabe?
You can assume that the first name that comes before it will always be one word that begins with a capital letter. 
The regex must match the following: 'Haruto Watanabe' 'Alice Watanabe' 'RoboCop Watanabe' but not the following: 
'haruto Watanabe' (where the first name is not capitalized) 'Mr. Watanabe' (where the preceding word has a nonletter character) 
'Watanabe' (which has no first name) 'Haruto watanabe' (where Watanabe is not capitalized)

To match the full name of someone whose name is Watanabe, where the first name is word that begins with a capital letter, you can use the following regex:

\b[A-Z][a-z]*\sWatanabe\b

This regex will match any string that contains a word character (\b), followed by one or more uppercase letters ([A-Z]), followed by zero or more lowercase letters ([a-z]*),
followed by a whitespace character (\s), followed by the word "Watanabe" (Watanabe), and finally another word boundary (\b).

This regex will match the following:

'Haruto Watanabe'
'Alice Watanabe'
'RoboCop Watanabe'
But it will not match the following:

'haruto Watanabe' (where the first name is not capitalized)
'Mr. Watanabe' (where the preceding word has a nonletter character)
'Watanabe' (which has no first name)
'Haruto watanabe' (where Watanabe is not capitalized)

----------------------------------------------------------------------------------------22---------------------------------------------------------------------------------------------------

22. How would you write a regex that matches a sentence where the first word is either Alice, Bob, or Carol; the second word is either eats, pets, 
or throws; the third word is apples, cats, or baseballs; and the sentence ends with a period? This regex should be case-insensitive. 
It must match the following: 'Alice eats apples.' 'Bob pets cats.' 'Carol throws baseballs.' 'Alice throws Apples.' 'BOB EATS CATS.' but not the following:
'RoboCop eats apples.' 'ALICE THROWS FOOTBALLS.' 'Carol eats 7 cats.'


^(?i)(Alice|Bob|Carol) (eats|pets|throws) (apples|cats|baseballs)\.$

This regex pattern matches a sentence with the structure you've specified.

Explanation:

^(?i): The start of the string. (?i) makes the regex case-insensitive.
(Alice|Bob|Carol): The first word in the sentence. It must be Alice, Bob, or Carol.
 : A space.
(eats|pets|throws): The second word in the sentence. It must be eats, pets, or throws.
 : A space.
(apples|cats|baseballs): The third word in the sentence. It must be apples, cats, or baseballs.
\.$: A literal period ('.') to signify the end of the sentence.
Note: The entire pattern is enclosed in a group (), but since we are using the case-insensitive flag (?i), we do not need to specify another case-insensitive group.

Also, remember that if you're using a regex in Python, you need to escape the backslashes in the regex pattern.
