                                                                               Python Assignment-2


1.What are the two values of the Boolean data type? How do you write them?

The two values of the Boolean data type True and False. In Python, they are written as is, with a capitalized True or False.

-------------------------------------------------------------------------------------------2--------------------------------------------------------------------------------------------------

2. What are the three different types of Boolean operators?

The three different types of Boolean operators AND, OR, and NOT. The AND operator narrows a search by finding results that contain all keywords,
the OR operator broadens a search by finding results contain at least one of the, and the NOT operator narrows a by excluding certain keywords from the results.

-------------------------------------------------------------------------------------------3-----------------------------------------------------------------------------------------------------------

3. Make a list of each Boolean operator&#39;s truth tables (i.e. every possible combination of Boolean
values for the operator and what it evaluate ).

AND Operator:

A	B	A AND B
True	True	True
True	False	False
False	True	False
False	False	False

OR Operator:

A	B	A OR B
True	True	True
True	False	True
False	True	True
False	False	False
NOT Operator:
A	NOT A
True	False
False	True

XOR Operator:

A	B	A XOR B
True	True	False
True	False	True
False	True	True
False	False	False

NAND Operator:

A	B	A NAND B
True	True	False
True	False	True
False	True	True
False	False	True

NOR Operator:

A	B	A NOR B
True	True	False
True	False	False
False	True	False
False	False	True

Implication Operator:

A	B	A → B
True	True	True
True	False	False
False	True	True
False	False	True

Biconditional Operator:

A	B	A ↔ B
True	True	True
True	False	False
False	True	False
False	False	True

-------------------------------------------------------------------------------------------4-------------------------------------------------------------------------------------------------------
4. What are the values of the following expressions?
(5 &gt; 4) and (3 == 5)
not (5 &gt; 4)
(5 &gt; 4) or (3 == 5)
not ((5 &gt; 4) or (3 == 5))
(True and True) and (True == False)
(not False) or (not True)

 true && true = true b. true && true = true c. false || false = false d. ! (false) = true e. false && unknown = unknown (x and y are not defined) f. 
true || unknown = true g. ! ( (true) || (unknown) && true) = !true = false h. false || (false) = false i. false || false = false j. false && false = false k. 
false && false = false l. false + true = 1

(5 > 4) and (3 == 5) = true and false = false not (5 > 4) = not true = false (5 > 4)
or (3 == 5) = true or false = true not ((5 > 4) or (3 == 5)) = not true = false (True and True)
and (True == False) = true and false = false (not False) or (not True) = true or false = true

------------------------------------------------------------------------------------------------5----------------------------------------------------------------------------------------------

5. What are the six comparison operators?

The six comparison operators in programming are:

Equal to (==)
Not equal to (!= or <>)
Greater than (>)
Less than (<) 5.ater than or equal to (>=)
Less than or equal to (<=)
These operators are used to compare two values and determine their relationship in terms of equality, inequality, or relative magnitude.

---------------------------------------------------------------------------------------6-----------------------------------------------------------------------------------------------------

6. How do you tell the difference between the equal to and assignment operators?Describe a
condition and when you would use one.

In programming, the equal to operator (==) used to test or define the relationship between two entities and check if they are equal,
while the assignment operator (=) is used to assign the value stored in the storage location denoted by a name.

For example, consider the following code:

int x = 10
int y;

if (x == 10) {
  // This condition checks if x is equal to 10 and returns true, so the code inside the if block will be executed
  y = x;
}

In this example, the equal to operator (==) is used in the if statement to check if the value of x is equal to 1

-------------------------------------------------------------------------------------------7------------------------------------------------------------------------------------------------------------



7. Identify the three blocks in this code:
spam = 0
if spam == 10:
print(&#39;eggs&#39;)
if spam &gt; 5:
print(&#39;bacon&#39;)
else:
print(&#39;ham&#39;)
print(&#39;spam&#39;)
print(&#39;spam&#39;)

Here's the code separated into the blocks:

The first block checks if spam is equal to 10 and prints "eggs" if true.

if spam == 10:
    print('eggs')

The second block checks if spam is greater than 5 and prints "bacon" if true. If spam is not greater than 5, it prints "ham".

if spam > 5:
    print('bacon')
else:
    print('ham')

The third block prints "spam" twice.

print('spam')
print('spam')

In each block, the indentation indicates the beginning and end of the code block. This helps the interpreter know what code should be executed as part of each condition or loop.

-----------------------------------------------------------------------------------8----------------------------------------------------------------------------------------------------------

8. Write code that prints Hello if 1 is stored in spam, prints Howdy if 2 is stored in spam, and prints
Greetings! if anything else is stored in spam.

 Using a function and if-elif-else statements:

def print_greeting(spam):
    if spam == 1:
        print("Hello")
    elif spam == 2:
        print("Howdy")
    else:
        print("Greetings!")

spam = 1 # replace with the value you want to check
print_greeting(spam)

This function checks the value of spam and prints the corresponding greeting. If spam has any other value, it will print "Greetings!".

------------------------------------------------------------------------------------------9----------------------------------------------------------------------------------------------------

9.If your programme is stuck in an endless loop, what keys you’ll press?

To end a while loop prematurely in Python, press CL-C while your program is stuck the loop. This will raise a KeyInterrupt error thatinates the whole program.
To avoid termination, enclose while loop in a try/except block and the KeyboardInter.

--------------------------------------------------------------------------------------------10-----------------------------------------------------------------------------------------------

10. How can you tell the difference between break and continue?

In a programming context, thebreak' statement is used to terminate the smallest enclosing loop or switch statement,
while the 'continue' is used to skip the current iteration of the loop and move on to the next one. 
The key difference is that 'break' stops the execution of the loop entirely, while 'continue'ips over the remaining code in the current iteration and starts the next one.

For example, consider the following code snippet:

for (int i = 0; i < 10; i++)
{
    if (i == 3)
    {
        break;
    }
    Console.WriteLine(i);
}

for (int j = 0; j < 10; j++)
{
    if (j == 3)
    {
        continue;

-------------------------------------------------------------------------------------------11----------------------------------------------------------------------------------------------

11. In a for loop, what is the difference between range(10), range(0, 10), and range(0, 10, 1)?

In a for loop,(10) generates a sequence of numbers from 0 to 9, while range(0, 10) also generates a sequence of from 0 to 9.
However, range(0, 10, 1) generates a sequence of numbers 0 to 9 with a step of 1, which is redundant since the default step is 1. 
Therefore, range(0, 10) and range(0, 10, 1) have the same effect in a for loop.

To print all multiples of 3 between 10 and 25 using the range function, you can use the following code:

for i in range(10, 26, 3):
    print(i)

This will print the numbers 10, 13, 16, 19, 22, and 25.

------------------------------------------------------------------------------------------12----------------------------------------------------------------------------------------------------
12. Write a short program that prints the numbers 1 to 10 using a for loop. Then write an equivalent
program that prints the numbers 1 to 10 using a while loop.

For loop approach:

for i in range(1, 11):
    print(i)

While loop approach:

i = 1
while i <= 10:
    print(i)
    i += 1

In both approaches, the program prints the numbers 1 to 10. However, the for loop approach is more concise and readable, making it a better choice in most situations.
The while loop approach can be more suitable when you need more control over the incrementation or have complex conditions for the loop to continue.

--------------------------------------------------------------------------------13-----------------------------------------------------------------------------------------------------------

13. If you had a function named bacon() inside a module named spam, how would you call it after
importing spam?

The two values of the Boolean data type are False and True. In Python, Boolean values are written as lowercase words, not numbers.

The three different types of Boolean operators are AND, OR, and NOT.

Here are the truth tables for each Boolean operator:

AND:

a	b	a AND b
F	F	F
F	T	F
T	F	F
T	T	T
OR:

a	b	a OR b
F	F	F
F	T	T
T	F	T
T	T	T
NOT:

a	NOT a
F	True
T	False
Here are the values of the given Boolean expressions:

(5 > 4) and (3 == 5): False
not (5 > 4): False
(5 > 4) or (3 == 5): True
not ((5 > 4) or (3 == 5)): False
(True and True) and (True == False): False
(not False) or (not True): True
The six comparison operators are ==, !=, >, <, >=, and <=.

The equal to operator (==) is used to compare whether two values are equal or not. The assignment operator (=) is used to assign a value to a variable.
For example, in the expression x = 5, the assignment operator assigns the value 5 to the variable x.

Here are the three blocks in the given code:

Block 1: spam = 0 (value assignment)

Block 2: spam = 0 (value assignment)

Block 3:

print('eggs')
if spam > 5:
    print('bacon')
else:
    print('ham')
print('spam')
print('spam')

Here's the code that prints "Hello" if 1 is stored in spam, "Howdy" if 2 is stored in spam, and "Greetings!" if anything else is stored in spam:

spam = int(input("Enter a number: "))
if spam == 1:
    print("Hello")
elif spam == 2:
    print("Howdy")
else:
    print("Greetings!")

If your program is stuck in an endless loop, you can press Ctrl+C to stop the program.

The break statement is used to exit a loop early, while the continue statement is used to skip the current iteration of a loop and move on to the next one.

In a for loop, range(10) generates a sequence of numbers from 0 to 9, range(0, 10) generates a sequence of numbers from 0 to 9, and range(0, 10, 1) 
generates a sequence of numbers from 0 to 9 with a step size of 1. All three forms are equivalent.

Here's the code that prints the numbers 1 to 10 using a for loop:

for i in range(1, 11):
    print(i)

And here's the equivalent code using a while loop:

i = 1
while i <= 10:
    print(i)
    i += 1

To call the bacon() function from the spam module, you can use the following syntax:

import spam
spam.bacon()

Extra credit:

The round() function is
